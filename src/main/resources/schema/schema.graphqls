schema {
    query: Query
#    mutation: Mutation
}

#Root Query
type Query {
    # System-wide information
    system: System

    # Return more details about the Swarm. Requires Docker API >= 1.24
    swarm: Swarm

    # List containers matching various filters
    containers(
    all: Boolean,
    limit: Int,
    size: Boolean,
    filter: ContainerFilter): [Container]

    # List images matching various filters
    images(
    all: Boolean,
    digests: Boolean,
    filter: ImageFilter): [Image]

    # Search images on Docker Hub
    searchImagesOnDockerHub(term: String!): [ImageSearchResult]

    # List volumes matching various filters
    volumes(filter: VolumeFilter): VolumeList

    # List networks matching various filters
    networks(filter: NetworkFilter): [Network]
}

#type Mutation {
#
#    ################
#    # Containers
#    ################
#    createContainers(requests: [CreateContainerRequest]): [Container]
#    resizeContainerTTY(idOrName: String!, height: Int, width: Int): Boolean
#    startContainer(idOrName: String!, detachKeys: String): Boolean
#    stopContainer(idOrName: String!, waitSeconds: Int): Boolean
#    restartContainer(idOrName: String!, waitSeconds: Int):Boolean
#    killContainer(idOrName: String!, signal: String): Boolean
#    updateContainer(idOrName: String!, request: UpdateContainerRequest): Container
#    renameContainer(idOrName: String!, name: String): Boolean
#    pauseContainer(idOrName: String!): Boolean
#    unpauseContainer(idOrName: String!): Boolean
#    waitContainer(idOrName: String!, condition: String): Boolean
#    removeContainer(idOrName: String!, removeVolumes: Boolean, killIfRunning: Boolean, removeLink: Boolean): Boolean
#    deleteStoppedContainers(filter: PruneContainerFilter): PruneContainerResponse
#
#}
